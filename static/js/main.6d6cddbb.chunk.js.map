{"version":3,"sources":["components/login.js","components/signup.js","App.js","serviceWorker.js","index.js"],"names":["Login","className","type","placeholder","to","Component","SignUp","App","basename","window","location","pathname","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0UAGqBA,E,uKAEb,OACI,8BACA,qCAEA,yBAAKC,UAAU,cACX,2CACA,2BAAOC,KAAK,OAAOD,UAAU,eAAeE,YAAY,oBAG5D,yBAAKF,UAAU,cACX,2CACA,2BAAOC,KAAK,WAAWD,UAAU,eAAeE,YAAY,oBAEhE,4BAAQD,KAAK,SAASD,UAAU,6BAAhC,SAEA,yBAAKA,UAAU,uBAAf,yBAC6B,kBAAC,IAAD,CAAMA,UAAU,WAAWG,GAAI,YAA/B,qB,GAlBNC,aCAdC,E,uKAEb,OACI,8BACI,uCAEA,yBAAKL,UAAU,cACX,uCACA,2BAAOC,KAAK,OAAOD,UAAU,eAAeE,YAAY,qBAE5D,yBAAKF,UAAU,cACX,2CACA,2BAAOC,KAAK,OAAOD,UAAU,eAAeE,YAAY,yBAE5D,yBAAKF,UAAU,cACX,gDACA,2BAAOC,KAAK,QAAQD,UAAU,eAAeE,YAAY,sBAE7D,yBAAKF,UAAU,cACX,+CACA,2BAAOC,KAAK,QAAQD,UAAU,eAAeE,YAAY,6BAE7D,yBAAKF,UAAU,cACX,2CACA,2BAAOC,KAAK,QAAQD,UAAU,eAAeE,YAAY,cAE7D,yBAAKF,UAAU,cACX,mDACA,2BAAOC,KAAK,WAAWD,UAAU,eAAeE,YAAY,sBAGhE,4BAAQD,KAAK,SAASD,UAAU,6BAAhC,WACA,yBAAKA,UAAU,uBAAf,2BAC2B,kBAAC,IAAD,CAAMA,UAAU,WAAWG,GAAI,YAA/B,oB,GAjCPC,a,MCiCrBE,MA7Bf,WACE,OAcA,yBAAKN,UAAU,OACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,cACb,kBAAC,IAAD,CAAeO,SAAUC,OAAOC,SAASC,UAAY,IACnD,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOO,KAAK,WAAWC,UAAWd,IAClC,kBAAC,IAAD,CAAOa,KAAK,WAAWC,UAAWR,SChBxBS,QACW,cAA7BN,OAAOC,SAASM,UAEe,UAA7BP,OAAOC,SAASM,UAEhBP,OAAOC,SAASM,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6d6cddbb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nexport default class Login extends Component {\r\n    render() {\r\n        return (\r\n            <form>\r\n            <h3>Login</h3>\r\n\r\n            <div className=\"form-group\">\r\n                <label>Username</label>\r\n                <input type=\"text\" className=\"form-control\" placeholder=\"Enter username\" />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label>Password</label>\r\n                <input type=\"password\" className=\"form-control\" placeholder=\"Enter password\" />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary btn-block\">Login</button>\r\n           \r\n            <div className=\"account text-center\">\r\n                   Don't have an account?<Link className=\"nav-link\" to={\"/sign-up\"}>Signup here</Link>\r\n            </div>\r\n            \r\n        </form>\r\n                \r\n    \r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nexport default class SignUp extends Component {\r\n    render() {\r\n        return (\r\n            <form>\r\n                <h3>Sign Up</h3>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Name</label>\r\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Enter your name\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Username</label>\r\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Enter your Username\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Email address</label>\r\n                    <input type=\"email\" className=\"form-control\" placeholder=\"Enter your email\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Phone number</label>\r\n                    <input type=\"email\" className=\"form-control\" placeholder=\"Enter your phone number\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Password</label>\r\n                    <input type=\"email\" className=\"form-control\" placeholder=\"Password\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Confirm password</label>\r\n                    <input type=\"password\" className=\"form-control\" placeholder=\"Confirm password\" />\r\n                </div>\r\n\r\n                <button type=\"submit\" className=\"btn btn-primary btn-block\">Sign Up</button>\r\n                <div className=\"account text-center\">\r\n                   Already have an account?<Link className=\"nav-link\" to={\"/sign-in\"}>login here</Link>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter , Route} from 'react-router-dom';\nimport Login from \"./components/login\";\nimport SignUp from \"./components/signup\";\nimport './App.css';\n\nfunction App() {\n  return (\n  // <Router>\n  //   <div className=\"App\">\n  //     <div className=\"auth-wrapper\">\n  //       <div className=\"auth-inner\">\n  //         <Switch>\n  //           <Route exact path='/' component={SignUp} />\n  //           <Route path=\"/sign-in\" component={Login} />\n  //           <Route path=\"/sign-up\" component={SignUp} />\n  //         </Switch>\n  //       </div>\n  //     </div>\n  //   </div>\n  // </Router>\n  <div className=\"App\">\n    <div className=\"auth-wrapper\">\n      <div className=\"auth-inner\">\n        <BrowserRouter basename={window.location.pathname || ''}>\n          <Route exact path='/' component={SignUp} />\n          <Route path=\"/sign-in\" component={Login} />\n          <Route path=\"/sign-up\" component={SignUp} />\n        </BrowserRouter>\n      </div>\n    </div>\n  </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}